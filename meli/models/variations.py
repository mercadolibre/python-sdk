# coding: utf-8

"""
    MELI Markeplace SDK

    This is a the codebase to generate a SDK for Open Platform Marketplace  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from meli.configuration import Configuration


class Variations(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'price': 'int',
        'attribute_combinations': 'list[VariationsAttributeCombinations]',
        'available_quantity': 'int',
        'sold_quantity': 'int',
        'picture_ids': 'list[str]'
    }

    attribute_map = {
        'price': 'price',
        'attribute_combinations': 'attribute_combinations',
        'available_quantity': 'available_quantity',
        'sold_quantity': 'sold_quantity',
        'picture_ids': 'picture_ids'
    }

    def __init__(self, price=None, attribute_combinations=None, available_quantity=None, sold_quantity=None, picture_ids=None, local_vars_configuration=None):  # noqa: E501
        """Variations - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._price = None
        self._attribute_combinations = None
        self._available_quantity = None
        self._sold_quantity = None
        self._picture_ids = None
        self.discriminator = None

        if price is not None:
            self.price = price
        if attribute_combinations is not None:
            self.attribute_combinations = attribute_combinations
        if available_quantity is not None:
            self.available_quantity = available_quantity
        if sold_quantity is not None:
            self.sold_quantity = sold_quantity
        if picture_ids is not None:
            self.picture_ids = picture_ids

    @property
    def price(self):
        """Gets the price of this Variations.  # noqa: E501


        :return: The price of this Variations.  # noqa: E501
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Variations.


        :param price: The price of this Variations.  # noqa: E501
        :type: int
        """

        self._price = price

    @property
    def attribute_combinations(self):
        """Gets the attribute_combinations of this Variations.  # noqa: E501


        :return: The attribute_combinations of this Variations.  # noqa: E501
        :rtype: list[VariationsAttributeCombinations]
        """
        return self._attribute_combinations

    @attribute_combinations.setter
    def attribute_combinations(self, attribute_combinations):
        """Sets the attribute_combinations of this Variations.


        :param attribute_combinations: The attribute_combinations of this Variations.  # noqa: E501
        :type: list[VariationsAttributeCombinations]
        """

        self._attribute_combinations = attribute_combinations

    @property
    def available_quantity(self):
        """Gets the available_quantity of this Variations.  # noqa: E501


        :return: The available_quantity of this Variations.  # noqa: E501
        :rtype: int
        """
        return self._available_quantity

    @available_quantity.setter
    def available_quantity(self, available_quantity):
        """Sets the available_quantity of this Variations.


        :param available_quantity: The available_quantity of this Variations.  # noqa: E501
        :type: int
        """

        self._available_quantity = available_quantity

    @property
    def sold_quantity(self):
        """Gets the sold_quantity of this Variations.  # noqa: E501


        :return: The sold_quantity of this Variations.  # noqa: E501
        :rtype: int
        """
        return self._sold_quantity

    @sold_quantity.setter
    def sold_quantity(self, sold_quantity):
        """Sets the sold_quantity of this Variations.


        :param sold_quantity: The sold_quantity of this Variations.  # noqa: E501
        :type: int
        """

        self._sold_quantity = sold_quantity

    @property
    def picture_ids(self):
        """Gets the picture_ids of this Variations.  # noqa: E501


        :return: The picture_ids of this Variations.  # noqa: E501
        :rtype: list[str]
        """
        return self._picture_ids

    @picture_ids.setter
    def picture_ids(self, picture_ids):
        """Sets the picture_ids of this Variations.


        :param picture_ids: The picture_ids of this Variations.  # noqa: E501
        :type: list[str]
        """

        self._picture_ids = picture_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Variations):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Variations):
            return True

        return self.to_dict() != other.to_dict()
