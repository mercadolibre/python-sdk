# coding: utf-8

"""
    MELI Markeplace SDK

    This is a the codebase to generate a SDK for Open Platform Marketplace  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from meli.configuration import Configuration


class Attributes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'value_id': 'str',
        'value_name': 'str',
        'value_struct': 'AttributesValueStruct',
        'values': 'list[AttributesValues]',
        'attribute_group_id': 'str',
        'attribute_group_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'value_id': 'value_id',
        'value_name': 'value_name',
        'value_struct': 'value_struct',
        'values': 'values',
        'attribute_group_id': 'attribute_group_id',
        'attribute_group_name': 'attribute_group_name'
    }

    def __init__(self, id=None, name=None, value_id=None, value_name=None, value_struct=None, values=None, attribute_group_id=None, attribute_group_name=None, local_vars_configuration=None):  # noqa: E501
        """Attributes - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._value_id = None
        self._value_name = None
        self._value_struct = None
        self._values = None
        self._attribute_group_id = None
        self._attribute_group_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        self.value_id = value_id
        if value_name is not None:
            self.value_name = value_name
        self.value_struct = value_struct
        if values is not None:
            self.values = values
        if attribute_group_id is not None:
            self.attribute_group_id = attribute_group_id
        if attribute_group_name is not None:
            self.attribute_group_name = attribute_group_name

    @property
    def id(self):
        """Gets the id of this Attributes.  # noqa: E501


        :return: The id of this Attributes.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Attributes.


        :param id: The id of this Attributes.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Attributes.  # noqa: E501


        :return: The name of this Attributes.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Attributes.


        :param name: The name of this Attributes.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def value_id(self):
        """Gets the value_id of this Attributes.  # noqa: E501


        :return: The value_id of this Attributes.  # noqa: E501
        :rtype: str
        """
        return self._value_id

    @value_id.setter
    def value_id(self, value_id):
        """Sets the value_id of this Attributes.


        :param value_id: The value_id of this Attributes.  # noqa: E501
        :type: str
        """

        self._value_id = value_id

    @property
    def value_name(self):
        """Gets the value_name of this Attributes.  # noqa: E501


        :return: The value_name of this Attributes.  # noqa: E501
        :rtype: str
        """
        return self._value_name

    @value_name.setter
    def value_name(self, value_name):
        """Sets the value_name of this Attributes.


        :param value_name: The value_name of this Attributes.  # noqa: E501
        :type: str
        """

        self._value_name = value_name

    @property
    def value_struct(self):
        """Gets the value_struct of this Attributes.  # noqa: E501


        :return: The value_struct of this Attributes.  # noqa: E501
        :rtype: AttributesValueStruct
        """
        return self._value_struct

    @value_struct.setter
    def value_struct(self, value_struct):
        """Sets the value_struct of this Attributes.


        :param value_struct: The value_struct of this Attributes.  # noqa: E501
        :type: AttributesValueStruct
        """

        self._value_struct = value_struct

    @property
    def values(self):
        """Gets the values of this Attributes.  # noqa: E501


        :return: The values of this Attributes.  # noqa: E501
        :rtype: list[AttributesValues]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this Attributes.


        :param values: The values of this Attributes.  # noqa: E501
        :type: list[AttributesValues]
        """

        self._values = values

    @property
    def attribute_group_id(self):
        """Gets the attribute_group_id of this Attributes.  # noqa: E501


        :return: The attribute_group_id of this Attributes.  # noqa: E501
        :rtype: str
        """
        return self._attribute_group_id

    @attribute_group_id.setter
    def attribute_group_id(self, attribute_group_id):
        """Sets the attribute_group_id of this Attributes.


        :param attribute_group_id: The attribute_group_id of this Attributes.  # noqa: E501
        :type: str
        """

        self._attribute_group_id = attribute_group_id

    @property
    def attribute_group_name(self):
        """Gets the attribute_group_name of this Attributes.  # noqa: E501


        :return: The attribute_group_name of this Attributes.  # noqa: E501
        :rtype: str
        """
        return self._attribute_group_name

    @attribute_group_name.setter
    def attribute_group_name(self, attribute_group_name):
        """Sets the attribute_group_name of this Attributes.


        :param attribute_group_name: The attribute_group_name of this Attributes.  # noqa: E501
        :type: str
        """

        self._attribute_group_name = attribute_group_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Attributes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Attributes):
            return True

        return self.to_dict() != other.to_dict()
